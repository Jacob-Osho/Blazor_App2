@inject IFileReaderService _fileReader
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="inputGroupFile">@Label</span>
    </div>
    <div class="custom-file">
        <input type="file" class="custom-file-input" id="inputGroupFileField" aria-describedby="inputGroupFile"
               @ref="inputElement" @onchange="OnImageFileSelectedHandler" accept=".jpg,.jpeg,.png" />
        <label class="custom-file-label" for="inputGroupFileField">@fileName</label>
    </div>
</div>

<div>
    @if (imageBase64 is not null)
    {
        <div>
            <div class="my-3 mr-3">
                <img src="data:image/jpeg;base64,@imageBase64" class="img-thumbnail" width="200" />
            </div>
        </div>
    }
    @if (ImageUrl is not null)
    {
        <div>
            <div class="my-3 mr-3">
                <img src="ImageUrl" class="img-thumbnail" width="200" />
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Label { get; set; } = "Image";
    [Parameter] public string ImageUrl { get; set; }
    [Parameter] public EventCallback<string> OnImageFileSelected { get; set; }
    ElementReference inputElement;
    string imageBase64;
    string fileName = "Please Choose File";
    async Task OnImageFileSelectedHandler()
    {
        foreach (var iteam in await _fileReader.CreateReference(inputElement).EnumerateFilesAsync())
        {
            using (MemoryStream ms = await iteam.CreateMemoryStreamAsync(4 * 1024))
            {
                IFileInfo fileInfo = await iteam.ReadFileInfoAsync();
                fileName = fileInfo.Name;
                var byteImg = new byte[ms.Length];
                ms.Read(byteImg, 0, (int)ms.Length);
                imageBase64 = Convert.ToBase64String(byteImg);
                await OnImageFileSelected.InvokeAsync(imageBase64);
                ImageUrl = null;
                StateHasChanged();
            }
        }
    }

}

